{"ast":null,"code":"var _jsxFileName = \"/Users/autumn/Desktop/moviely/moviely/src/pages/MvchoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { mockMovies } from './Mockmv'; // Mockmv.js에서 mockMovies를 import 합니다.\nimport MvBanner from './MvBanner'; // MvBanner 컴포넌트를 import 합니다.\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MvchoPage() {\n  _s();\n  const [banners, setBanners] = useState([]);\n  useEffect(() => {\n    // 여기서 랜덤으로 영화를 선택하고, banners 상태를 업데이트합니다.\n    const selectedMovies = Array.from({\n      length: 12\n    }, () => {\n      const randomIndex = Math.floor(Math.random() * mockMovies.length);\n      return mockMovies[randomIndex];\n    });\n    setBanners(selectedMovies);\n  }, []); // 빈 배열은 컴포넌트가 마운트 될 때 한 번만 이 effect를 실행하라는 의미입니다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MvchoPage\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bannersContainer\",\n      children: banners.map((movie, index) => /*#__PURE__*/_jsxDEV(MvBanner, {\n        movie: movie\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this);\n}\n_s(MvchoPage, \"hrLvPCLPHM6cpg7gXxBBGT80Iz0=\");\n_c = MvchoPage;\nexport default MvchoPage;\nvar _c;\n$RefreshReg$(_c, \"MvchoPage\");","map":{"version":3,"names":["React","useState","useEffect","mockMovies","MvBanner","jsxDEV","_jsxDEV","MvchoPage","_s","banners","setBanners","selectedMovies","Array","from","length","randomIndex","Math","floor","random","className","children","map","movie","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/autumn/Desktop/moviely/moviely/src/pages/MvchoPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { mockMovies } from './Mockmv'; // Mockmv.js에서 mockMovies를 import 합니다.\nimport MvBanner from './MvBanner'; // MvBanner 컴포넌트를 import 합니다.\n\nfunction MvchoPage() {\n  const [banners, setBanners] = useState([]);\n\n  useEffect(() => {\n    // 여기서 랜덤으로 영화를 선택하고, banners 상태를 업데이트합니다.\n    const selectedMovies = Array.from({ length: 12 }, () => {\n      const randomIndex = Math.floor(Math.random() * mockMovies.length);\n      return mockMovies[randomIndex];\n    });\n    setBanners(selectedMovies);\n  }, []); // 빈 배열은 컴포넌트가 마운트 될 때 한 번만 이 effect를 실행하라는 의미입니다.\n\n  return (\n    <div className=\"MvchoPage\">\n      {/* 상단 고정 컨테이너 및 기타 요소 */}\n      {/* ... */}\n      \n      {/* 배너를 렌더링하는 부분 */}\n      <div className=\"bannersContainer\">\n        {banners.map((movie, index) => (\n          <MvBanner key={index} movie={movie} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default MvchoPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,UAAU,CAAC,CAAC;AACvC,OAAOC,QAAQ,MAAM,YAAY,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEnC,SAASC,SAASA,CAAA,EAAG;EAAAC,EAAA;EACnB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMS,cAAc,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,MAAM;MACtD,MAAMC,WAAW,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGf,UAAU,CAACW,MAAM,CAAC;MACjE,OAAOX,UAAU,CAACY,WAAW,CAAC;IAChC,CAAC,CAAC;IACFL,UAAU,CAACC,cAAc,CAAC;EAC5B,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACEL,OAAA;IAAKa,SAAS,EAAC,WAAW;IAAAC,QAAA,eAKxBd,OAAA;MAAKa,SAAS,EAAC,kBAAkB;MAAAC,QAAA,EAC9BX,OAAO,CAACY,GAAG,CAAC,CAACC,KAAK,EAAEC,KAAK,kBACxBjB,OAAA,CAACF,QAAQ;QAAakB,KAAK,EAAEA;MAAM,GAApBC,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CACtC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACnB,EAAA,CAzBQD,SAAS;AAAAqB,EAAA,GAATrB,SAAS;AA2BlB,eAAeA,SAAS;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}