{"ast":null,"code":"var _jsxFileName = \"/Users/autumn/Desktop/moviely/moviely/src/pages/MvchoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useContext } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport MvBanner from './MvBanner';\nimport '../css/MvchoPage.css';\nimport logoImage from '../logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MvchoPage() {\n  _s();\n  const genreMapping = {\n    '장르 전체': 'All',\n    '액션': '28',\n    '모험': '12',\n    '애니메이션': '16',\n    '코미디': '35',\n    '범죄': '80',\n    '다큐멘터리': '99',\n    '드라마': '18',\n    '가족': '10751',\n    '판타지': '14',\n    '역사': '36',\n    '공포': '27',\n    '음악': '10402',\n    '미스터리': '9648',\n    '로맨스': '10749',\n    'SF': '878',\n    'TV 영화': '10770',\n    '스릴러': '53',\n    '전쟁': '10752',\n    '서부': '37'\n  };\n  const genres = Object.keys(genreMapping);\n  const [selectedGenre, setSelectedGenre] = useState('장르 전체');\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  const {\n    user\n  } = useContext(AuthContext);\n  useEffect(() => {\n    if (!user) {\n      navigate('/login'); // 사용자 정보가 없으면 로그인 페이지로 리디렉션\n      return;\n    }\n    console.log('Logged in user:', user); // 로그인된 사용자 정보를 콘솔에 출력\n\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch('http://43.203.39.119:8080/api/movies');\n        const data = await response.json();\n        const processedData = data.map(movie => ({\n          ...movie,\n          flatrate: movie.flatrate ? movie.flatrate.split(', ') : [],\n          genre: movie.genre ? movie.genre.split(', ') : [] // 장르 필드를 배열로 변환\n        }));\n        setMovies(processedData);\n        setLoading(false);\n        console.log('Processed Data:', processedData); // 데이터 확인\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n        setLoading(false);\n      }\n    };\n    fetchMovies();\n  }, [user, navigate]);\n  const filteredMovies = selectedGenre === '장르 전체' ? movies : movies.filter(movie => movie.genre.includes(genreMapping[selectedGenre]) // 필터링 로직 수정\n  );\n  const banners = filteredMovies.map((movie, index) => /*#__PURE__*/_jsxDEV(MvBanner, {\n    title: movie.title,\n    poster: movie.poster_path,\n    flatrate: movie.flatrate.join(', '),\n    rating: Math.round(movie.vote_average / 2)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MvchoPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logoImage,\n      alt: \"Logo\",\n      className: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainText\",\n      children: \"\\uC7AC\\uBBF8\\uC788\\uAC8C \\uBD24\\uAC70\\uB098 \\uB208\\uAE38\\uC774 \\uAC00\\uB294 \\uC601\\uD654\\uB4E4\\uC744 \\uD3C9\\uAC00\\uD574\\uC8FC\\uC138\\uC694.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subText\",\n      children: \"\\uCC1C\\uD55C \\uC601\\uD654\\uB4E4\\uC744 \\uBC14\\uD0D5\\uC73C\\uB85C MOVIELY\\uAC00 \\uCDE8\\uD5A5\\uC800\\uACA9 \\uC601\\uD654\\uB4E4\\uC744 \\uCD94\\uCC9C\\uD574 \\uB4DC\\uB824\\uC694.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stickyTop\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/recommendations\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"recommendButton\",\n          children: \"\\uC601\\uD654 \\uCD94\\uCC9C \\uBC1B\\uAE30 >\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"genreButtons\",\n        children: genres.map(genre => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: `genreButton1 ${selectedGenre === genre ? 'active' : ''}`,\n          onClick: () => setSelectedGenre(genre),\n          children: genre\n        }, genre, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bannerGrid\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 20\n      }, this) : banners.length > 0 ? banners : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"noMovies\",\n        children: \"\\uC120\\uD0DD\\uD558\\uC2E0 \\uC7A5\\uB974\\uC758 \\uC601\\uD654\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 93\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, this);\n}\n_s(MvchoPage, \"k+tgRRxQzn9EF5meEfolraiJchs=\", false, function () {\n  return [useNavigate];\n});\n_c = MvchoPage;\nexport default MvchoPage;\nvar _c;\n$RefreshReg$(_c, \"MvchoPage\");","map":{"version":3,"names":["React","useState","useEffect","useContext","Link","useNavigate","MvBanner","logoImage","jsxDEV","_jsxDEV","MvchoPage","_s","genreMapping","genres","Object","keys","selectedGenre","setSelectedGenre","movies","setMovies","loading","setLoading","navigate","user","AuthContext","console","log","fetchMovies","response","fetch","data","json","processedData","map","movie","flatrate","split","genre","error","filteredMovies","filter","includes","banners","index","title","poster","poster_path","join","rating","Math","round","vote_average","fileName","_jsxFileName","lineNumber","columnNumber","className","children","src","alt","to","onClick","length","_c","$RefreshReg$"],"sources":["/Users/autumn/Desktop/moviely/moviely/src/pages/MvchoPage.js"],"sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { Link, useNavigate } from 'react-router-dom';\nimport MvBanner from './MvBanner';\nimport '../css/MvchoPage.css';\nimport logoImage from '../logo.png';\n\nfunction MvchoPage() {\n  const genreMapping = {\n    '장르 전체': 'All',\n    '액션': '28',\n    '모험': '12',\n    '애니메이션': '16',\n    '코미디': '35',\n    '범죄': '80',\n    '다큐멘터리': '99',\n    '드라마': '18',\n    '가족': '10751',\n    '판타지': '14',\n    '역사': '36',\n    '공포': '27',\n    '음악': '10402',\n    '미스터리': '9648',\n    '로맨스': '10749',\n    'SF': '878',\n    'TV 영화': '10770',\n    '스릴러': '53',\n    '전쟁': '10752',\n    '서부': '37'\n  };\n  const genres = Object.keys(genreMapping);\n  const [selectedGenre, setSelectedGenre] = useState('장르 전체');\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const navigate = useNavigate();\n  const { user } = useContext(AuthContext);\n\n  useEffect(() => {\n    if (!user) {\n      navigate('/login'); // 사용자 정보가 없으면 로그인 페이지로 리디렉션\n      return;\n    }\n\n    console.log('Logged in user:', user); // 로그인된 사용자 정보를 콘솔에 출력\n\n    const fetchMovies = async () => {\n      try {\n        const response = await fetch('http://43.203.39.119:8080/api/movies');\n        const data = await response.json();\n        const processedData = data.map(movie => ({\n          ...movie,\n          flatrate: movie.flatrate ? movie.flatrate.split(', ') : [],\n          genre: movie.genre ? movie.genre.split(', ') : [] // 장르 필드를 배열로 변환\n        }));\n        setMovies(processedData);\n        setLoading(false);\n        console.log('Processed Data:', processedData); // 데이터 확인\n      } catch (error) {\n        console.error('Error fetching movies:', error);\n        setLoading(false);\n      }\n    };\n\n    fetchMovies();\n  }, [user, navigate]);\n\n  const filteredMovies = selectedGenre === '장르 전체' ? movies : movies.filter(movie =>\n    movie.genre.includes(genreMapping[selectedGenre]) // 필터링 로직 수정\n  );\n\n  const banners = filteredMovies.map((movie, index) => (\n    <MvBanner\n      key={index}\n      title={movie.title}\n      poster={movie.poster_path}\n      flatrate={movie.flatrate.join(', ')} \n      rating={Math.round(movie.vote_average / 2)}\n    />\n  ));\n\n  return (\n    <div className=\"MvchoPage\">\n      <img src={logoImage} alt=\"Logo\" className=\"logo\"/>\n      <div className=\"mainText\">재미있게 봤거나 눈길이 가는 영화들을 평가해주세요.</div>\n      <div className=\"subText\">찜한 영화들을 바탕으로 MOVIELY가 취향저격 영화들을 추천해 드려요.</div>\n      <div className=\"stickyTop\">\n        <Link to=\"/recommendations\">\n          <button className=\"recommendButton\">영화 추천 받기 &gt;</button>\n        </Link>\n        <div className=\"genreButtons\">\n          {genres.map((genre) => (\n            <button\n              key={genre}\n              className={`genreButton1 ${selectedGenre === genre ? 'active' : ''}`}\n              onClick={() => setSelectedGenre(genre)}\n            >\n              {genre}\n            </button>\n          ))}\n        </div>\n      </div>\n      <div className=\"bannerGrid\">\n        {loading ? <div className=\"loading\">로딩 중...</div> : (banners.length > 0 ? banners : <div className=\"noMovies\">선택하신 장르의 영화가 없습니다.</div>)}\n      </div>\n    </div>\n  );\n}\n\nexport default MvchoPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}