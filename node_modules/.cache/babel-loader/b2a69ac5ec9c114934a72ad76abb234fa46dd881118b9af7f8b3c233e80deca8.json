{"ast":null,"code":"var _jsxFileName = \"/Users/autumn/moviely \\u110B\\u1169\\u1112\\u116E 2.30.27/src/pages/LogSignPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport '../css/LogSignPage.css';\nimport logoImage from '../logo.png';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = '13094654813-nqglekemv1iff66rsq4luqftbfgv51hi.apps.googleusercontent.com';\nfunction LogSignPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    login\n  } = useAuth();\n  const handleGoogleSuccess = async response => {\n    try {\n      const res = await fetch('https://moviely.duckdns.org/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token: response.credential\n        }) // 토큰을 요청 본문에 포함\n      });\n      const data = await res.json();\n      if (data.token) {\n        login(data.token, data.user);\n        if (data.isNewUser) {\n          navigate('/add');\n        } else {\n          navigate('/movie-select');\n        }\n      } else {\n        alert('로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('Backend redirection failed:', error);\n      alert('백엔드 처리에 실패했습니다.');\n    }\n  };\n  const handleGoogleFailure = error => {\n    console.error('Google Login Failed:', error);\n    alert('Google 로그인에 실패했습니다.');\n  };\n  return /*#__PURE__*/_jsxDEV(GoogleOAuthProvider, {\n    clientId: CLIENT_ID,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logSignPage\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/\",\n        className: \"logSign-logo\",\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: logoImage,\n          alt: \"Logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"logSignBox\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"\\uB85C\\uADF8\\uC778 \\uBC0F \\uD68C\\uC6D0\\uAC00\\uC785\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\uC18C\\uC15C \\uB85C\\uADF8\\uC778 \\uBC0F \\uD68C\\uC6D0\\uAC00\\uC785\\uC73C\\uB85C\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 29\n          }, this), \"MOVIELY\\uC758 \\uBAA8\\uB4E0 \\uC11C\\uBE44\\uC2A4\\uB97C \\uC774\\uC6A9\\uD558\\uC2E4 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n          onSuccess: handleGoogleSuccess,\n          onError: handleGoogleFailure\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n_s(LogSignPage, \"sN4LvqGaoySlBpnUspPencFbx08=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = LogSignPage;\nexport default LogSignPage;\nvar _c;\n$RefreshReg$(_c, \"LogSignPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Link","GoogleOAuthProvider","GoogleLogin","logoImage","useAuth","jsxDEV","_jsxDEV","CLIENT_ID","LogSignPage","_s","navigate","login","handleGoogleSuccess","response","res","fetch","method","headers","body","JSON","stringify","token","credential","data","json","user","isNewUser","alert","error","console","handleGoogleFailure","clientId","children","className","to","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onSuccess","onError","_c","$RefreshReg$"],"sources":["/Users/autumn/moviely 오후 2.30.27/src/pages/LogSignPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { GoogleOAuthProvider, GoogleLogin } from '@react-oauth/google';\nimport '../css/LogSignPage.css';\nimport logoImage from '../logo.png';\nimport { useAuth } from '../context/AuthContext';\n\nconst CLIENT_ID = '13094654813-nqglekemv1iff66rsq4luqftbfgv51hi.apps.googleusercontent.com';\n\nfunction LogSignPage() {\n  const navigate = useNavigate();\n  const { login } = useAuth();\n\n  const handleGoogleSuccess = async (response) => {\n    try {\n      const res = await fetch('https://moviely.duckdns.org/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ token: response.credential }), // 토큰을 요청 본문에 포함\n      });\n      const data = await res.json();\n\n      if (data.token) {\n        login(data.token, data.user);\n        if (data.isNewUser) {\n          navigate('/add');\n        } else {\n          navigate('/movie-select');\n        }\n      } else {\n        alert('로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('Backend redirection failed:', error);\n      alert('백엔드 처리에 실패했습니다.');\n    }\n  };\n\n  const handleGoogleFailure = (error) => {\n    console.error('Google Login Failed:', error);\n    alert('Google 로그인에 실패했습니다.');\n  };\n\n  return (\n    <GoogleOAuthProvider clientId={CLIENT_ID}>\n      <div className=\"logSignPage\">\n        <Link to=\"/\" className=\"logSign-logo\">\n          <img src={logoImage} alt=\"Logo\" />\n        </Link>\n        <div className=\"logSignBox\">\n          <h2>로그인 및 회원가입</h2>\n          <p>소셜 로그인 및 회원가입으로<br />MOVIELY의 모든 서비스를 이용하실 수 있습니다.</p>\n          <GoogleLogin\n            onSuccess={handleGoogleSuccess}\n            onError={handleGoogleFailure}\n          />\n        </div>\n      </div>\n    </GoogleOAuthProvider>\n  );\n}\n\nexport default LogSignPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}