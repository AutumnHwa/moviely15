{"ast":null,"code":"var _jsxFileName = \"/Users/autumn/Desktop/moviely/moviely/src/pages/LogSignPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { gapi } from 'gapi-script';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = '13094654813-nqglekemv1iff66rsq4luqftbfgv51hi.apps.googleusercontent.com';\nfunction GoogleButton() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    login\n  } = useAuth();\n  useEffect(() => {\n    function start() {\n      gapi.client.init({\n        clientId: CLIENT_ID,\n        scope: ''\n      });\n    }\n    gapi.load('client:auth2', start);\n  }, []);\n  const handleGoogleLogin = () => {\n    const auth2 = gapi.auth2.getAuthInstance();\n    auth2.signIn().then(async googleUser => {\n      const profile = googleUser.getBasicProfile();\n      const idToken = googleUser.getAuthResponse().id_token;\n      try {\n        const res = await fetch('https://moviely.duckdns.org/api/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            token: idToken\n          }) // 토큰을 요청 본문에 포함\n        });\n        const data = await res.json();\n        if (data.token) {\n          login(data.token, data.user);\n          if (data.isNewUser) {\n            navigate('/add');\n          } else {\n            navigate('/movie-select');\n          }\n        } else {\n          alert('로그인에 실패했습니다.');\n        }\n      } catch (error) {\n        console.error('Backend redirection failed:', error);\n        alert('백엔드 처리에 실패했습니다.');\n      }\n    }).catch(error => {\n      console.error('Google Login Failed:', error);\n      alert('Google 로그인에 실패했습니다.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"googleLoginButton\",\n    onClick: handleGoogleLogin,\n    children: \"Google\\uB85C \\uC2DC\\uC791\\uD558\\uAE30\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n}\n_s(GoogleButton, \"aAUMmgKuIKQ7IvcuCOlm0ucjkuQ=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = GoogleButton;\nexport default GoogleButton;\nvar _c;\n$RefreshReg$(_c, \"GoogleButton\");","map":{"version":3,"names":["React","useEffect","useCallback","useNavigate","useAuth","gapi","jsxDEV","_jsxDEV","CLIENT_ID","GoogleButton","_s","navigate","login","start","client","init","clientId","scope","load","handleGoogleLogin","auth2","getAuthInstance","signIn","then","googleUser","profile","getBasicProfile","idToken","getAuthResponse","id_token","res","fetch","method","headers","body","JSON","stringify","token","data","json","user","isNewUser","alert","error","console","catch","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/autumn/Desktop/moviely/moviely/src/pages/LogSignPage.js"],"sourcesContent":["import React, { useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useAuth } from '../context/AuthContext';\nimport { gapi } from 'gapi-script';\n\nconst CLIENT_ID = '13094654813-nqglekemv1iff66rsq4luqftbfgv51hi.apps.googleusercontent.com';\n\nfunction GoogleButton() {\n  const navigate = useNavigate();\n  const { login } = useAuth();\n\n  useEffect(() => {\n    function start() {\n      gapi.client.init({\n        clientId: CLIENT_ID,\n        scope: '',\n      });\n    }\n\n    gapi.load('client:auth2', start);\n  }, []);\n\n  const handleGoogleLogin = () => {\n    const auth2 = gapi.auth2.getAuthInstance();\n    auth2.signIn().then(async (googleUser) => {\n      const profile = googleUser.getBasicProfile();\n      const idToken = googleUser.getAuthResponse().id_token;\n\n      try {\n        const res = await fetch('https://moviely.duckdns.org/api/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ token: idToken }), // 토큰을 요청 본문에 포함\n        });\n        const data = await res.json();\n\n        if (data.token) {\n          login(data.token, data.user);\n          if (data.isNewUser) {\n            navigate('/add');\n          } else {\n            navigate('/movie-select');\n          }\n        } else {\n          alert('로그인에 실패했습니다.');\n        }\n      } catch (error) {\n        console.error('Backend redirection failed:', error);\n        alert('백엔드 처리에 실패했습니다.');\n      }\n    }).catch((error) => {\n      console.error('Google Login Failed:', error);\n      alert('Google 로그인에 실패했습니다.');\n    });\n  };\n\n  return (\n    <button className=\"googleLoginButton\" onClick={handleGoogleLogin}>\n      Google로 시작하기\n    </button>\n  );\n}\n\nexport default GoogleButton;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AACrD,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,OAAO,QAAQ,wBAAwB;AAChD,SAASC,IAAI,QAAQ,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,SAAS,GAAG,yEAAyE;AAE3F,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACtB,MAAMC,QAAQ,GAAGR,WAAW,CAAC,CAAC;EAC9B,MAAM;IAAES;EAAM,CAAC,GAAGR,OAAO,CAAC,CAAC;EAE3BH,SAAS,CAAC,MAAM;IACd,SAASY,KAAKA,CAAA,EAAG;MACfR,IAAI,CAACS,MAAM,CAACC,IAAI,CAAC;QACfC,QAAQ,EAAER,SAAS;QACnBS,KAAK,EAAE;MACT,CAAC,CAAC;IACJ;IAEAZ,IAAI,CAACa,IAAI,CAAC,cAAc,EAAEL,KAAK,CAAC;EAClC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMM,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,MAAMC,KAAK,GAAGf,IAAI,CAACe,KAAK,CAACC,eAAe,CAAC,CAAC;IAC1CD,KAAK,CAACE,MAAM,CAAC,CAAC,CAACC,IAAI,CAAC,MAAOC,UAAU,IAAK;MACxC,MAAMC,OAAO,GAAGD,UAAU,CAACE,eAAe,CAAC,CAAC;MAC5C,MAAMC,OAAO,GAAGH,UAAU,CAACI,eAAe,CAAC,CAAC,CAACC,QAAQ;MAErD,IAAI;QACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;UAC/DC,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACP,cAAc,EAAE;UAClB,CAAC;UACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;YAAEC,KAAK,EAAEV;UAAQ,CAAC,CAAC,CAAE;QAC5C,CAAC,CAAC;QACF,MAAMW,IAAI,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,CAAC;QAE7B,IAAID,IAAI,CAACD,KAAK,EAAE;UACdzB,KAAK,CAAC0B,IAAI,CAACD,KAAK,EAAEC,IAAI,CAACE,IAAI,CAAC;UAC5B,IAAIF,IAAI,CAACG,SAAS,EAAE;YAClB9B,QAAQ,CAAC,MAAM,CAAC;UAClB,CAAC,MAAM;YACLA,QAAQ,CAAC,eAAe,CAAC;UAC3B;QACF,CAAC,MAAM;UACL+B,KAAK,CAAC,cAAc,CAAC;QACvB;MACF,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;QACnDD,KAAK,CAAC,iBAAiB,CAAC;MAC1B;IACF,CAAC,CAAC,CAACG,KAAK,CAAEF,KAAK,IAAK;MAClBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CD,KAAK,CAAC,qBAAqB,CAAC;IAC9B,CAAC,CAAC;EACJ,CAAC;EAED,oBACEnC,OAAA;IAAQuC,SAAS,EAAC,mBAAmB;IAACC,OAAO,EAAE5B,iBAAkB;IAAA6B,QAAA,EAAC;EAElE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAQ,CAAC;AAEb;AAAC1C,EAAA,CAxDQD,YAAY;EAAA,QACFN,WAAW,EACVC,OAAO;AAAA;AAAAiD,EAAA,GAFlB5C,YAAY;AA0DrB,eAAeA,YAAY;AAAC,IAAA4C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}