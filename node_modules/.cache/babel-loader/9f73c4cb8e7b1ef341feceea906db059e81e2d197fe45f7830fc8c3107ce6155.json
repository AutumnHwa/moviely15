{"ast":null,"code":"var _jsxFileName = \"/Users/autumn/Desktop/moviely/moviely/src/pages/LogSignPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useCallback } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { GoogleLogin } from 'react-google-login';\nimport '../css/LogSignPage.css';\nimport logoImage from '../logo.png';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = '13094654813-nqglekemv1iff66rsq4luqftbfgv51hi.apps.googleusercontent.com';\nfunction LogSignPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    login\n  } = useAuth();\n  const handleGoogleSuccess = useCallback(async response => {\n    const {\n      code\n    } = response;\n    try {\n      const res = await fetch('https://moviely.duckdns.org/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          code\n        }) // 인증 코드를 요청 본문에 포함\n      });\n      const data = await res.json();\n      if (data.token) {\n        login(data.token, data.user);\n        if (data.isNewUser) {\n          navigate('/add');\n        } else {\n          navigate('/movie-select');\n        }\n      } else {\n        alert('로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('Backend redirection failed:', error);\n      alert('백엔드 처리에 실패했습니다.');\n    }\n  }, [login, navigate]);\n  const handleGoogleFailure = useCallback(error => {\n    console.error('Google Login Failed:', error);\n    alert('Google 로그인에 실패했습니다.');\n  }, []);\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    const error = urlParams.get('error');\n    if (code) {\n      handleGoogleSuccess({\n        code\n      });\n    } else if (error) {\n      alert('Google 로그인에 실패했습니다.');\n    }\n  }, [handleGoogleSuccess]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"logSignPage\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"logSign-logo\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logoImage,\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logSignBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uB85C\\uADF8\\uC778 \\uBC0F \\uD68C\\uC6D0\\uAC00\\uC785\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uC18C\\uC15C \\uB85C\\uADF8\\uC778 \\uBC0F \\uD68C\\uC6D0\\uAC00\\uC785\\uC73C\\uB85C\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 27\n        }, this), \"MOVIELY\\uC758 \\uBAA8\\uB4E0 \\uC11C\\uBE44\\uC2A4\\uB97C \\uC774\\uC6A9\\uD558\\uC2E4 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        clientId: CLIENT_ID,\n        buttonText: \"Google\\uB85C \\uC2DC\\uC791\\uD558\\uAE30\",\n        onSuccess: handleGoogleSuccess,\n        onFailure: handleGoogleFailure,\n        cookiePolicy: 'single_host_origin',\n        responseType: \"code\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(LogSignPage, \"hedCaghLbe6TyN3tL/z80eEMtGY=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = LogSignPage;\nexport default LogSignPage;\nvar _c;\n$RefreshReg$(_c, \"LogSignPage\");","map":{"version":3,"names":["React","useEffect","useCallback","useNavigate","Link","GoogleLogin","logoImage","useAuth","jsxDEV","_jsxDEV","CLIENT_ID","LogSignPage","_s","navigate","login","handleGoogleSuccess","response","code","res","fetch","method","headers","body","JSON","stringify","data","json","token","user","isNewUser","alert","error","console","handleGoogleFailure","urlParams","URLSearchParams","window","location","search","get","className","children","to","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","clientId","buttonText","onSuccess","onFailure","cookiePolicy","responseType","_c","$RefreshReg$"],"sources":["/Users/autumn/Desktop/moviely/moviely/src/pages/LogSignPage.js"],"sourcesContent":["import React, { useEffect, useCallback } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { GoogleLogin } from 'react-google-login';\nimport '../css/LogSignPage.css';\nimport logoImage from '../logo.png';\nimport { useAuth } from '../context/AuthContext';\n\nconst CLIENT_ID = '13094654813-nqglekemv1iff66rsq4luqftbfgv51hi.apps.googleusercontent.com'; \n\nfunction LogSignPage() {\n  const navigate = useNavigate();\n  const { login } = useAuth();\n\n  const handleGoogleSuccess = useCallback(async (response) => {\n    const { code } = response;\n\n    try {\n      const res = await fetch('https://moviely.duckdns.org/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ code }), // 인증 코드를 요청 본문에 포함\n      });\n      const data = await res.json();\n\n      if (data.token) {\n        login(data.token, data.user);\n        if (data.isNewUser) {\n          navigate('/add');\n        } else {\n          navigate('/movie-select');\n        }\n      } else {\n        alert('로그인에 실패했습니다.');\n      }\n    } catch (error) {\n      console.error('Backend redirection failed:', error);\n      alert('백엔드 처리에 실패했습니다.');\n    }\n  }, [login, navigate]);\n\n  const handleGoogleFailure = useCallback((error) => {\n    console.error('Google Login Failed:', error);\n    alert('Google 로그인에 실패했습니다.');\n  }, []);\n\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    const error = urlParams.get('error');\n\n    if (code) {\n      handleGoogleSuccess({ code });\n    } else if (error) {\n      alert('Google 로그인에 실패했습니다.');\n    }\n  }, [handleGoogleSuccess]);\n\n  return (\n    <div className=\"logSignPage\">\n      <Link to=\"/\" className=\"logSign-logo\">\n        <img src={logoImage} alt=\"Logo\" />\n      </Link>\n      <div className=\"logSignBox\">\n        <h2>로그인 및 회원가입</h2>\n        <p>소셜 로그인 및 회원가입으로<br />MOVIELY의 모든 서비스를 이용하실 수 있습니다.</p>\n        <GoogleLogin\n          clientId={CLIENT_ID}\n          buttonText=\"Google로 시작하기\"\n          onSuccess={handleGoogleSuccess}\n          onFailure={handleGoogleFailure}\n          cookiePolicy={'single_host_origin'}\n          responseType=\"code\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default LogSignPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}