{"ast":null,"code":"import React,{useState,useEffect}from'react';import{Link}from'react-router-dom';import MvBanner from'./MvBanner';import'../css/MvchoPage.css';import logoImage from'../logo.png';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function MvchoPage(){// 한글 장르와 영어 장르를 매핑\nconst genreMapping={'장르 전체':'All','액션':'Action','모험':'Adventure','애니메이션':'Animation','코미디':'Comedy','범죄':'Crime','다큐멘터리':'Documentary','드라마':'Drama','가족':'Family','판타지':'Fantasy','역사':'History','공포':'Horror','음악':'Music','미스터리':'Mystery','로맨스':'Romance','SF':'Sci-Fi','TV 영화':'TV Movie','스릴러':'Thriller','전쟁':'War','서부':'Western'};const genres=Object.keys(genreMapping);const[selectedGenre,setSelectedGenre]=useState('장르 전체');const[movies,setMovies]=useState([]);const[loading,setLoading]=useState(true);useEffect(()=>{const API_URL='http://54.180.50.153:8080/api/movies';fetch(API_URL).then(response=>response.json()).then(data=>{console.log('API 응답 데이터:',data);// API 응답 데이터 확인\nconst processedData=data.map(movie=>({...movie,flatrate:movie.flatrate.split(', ')// 쉼표로 구분된 문자열을 배열로 변환\n}));setMovies(processedData);setLoading(false);}).catch(error=>{console.error('Error fetching data:',error);setLoading(false);});},[]);const filteredMovies=selectedGenre==='장르 전체'?movies:movies.filter(movie=>movie.genre.split(', ').includes(genreMapping[selectedGenre]));console.log('필터링된 영화 데이터:',filteredMovies);const banners=filteredMovies.map((movie,index)=>/*#__PURE__*/_jsx(MvBanner,{title:movie.title,poster:movie.poster_path,flatrate:movie.flatrate,rating:Math.round(movie.vote_average/2)},index));console.log('생성된 배너들:',banners);return/*#__PURE__*/_jsxs(\"div\",{className:\"MvchoPage\",children:[/*#__PURE__*/_jsx(\"img\",{src:logoImage,alt:\"Logo\",className:\"logo\"}),/*#__PURE__*/_jsx(\"div\",{className:\"mainText\",children:\"\\uC7AC\\uBBF8\\uC788\\uAC8C \\uBD24\\uAC70\\uB098 \\uB208\\uAE38\\uC774 \\uAC00\\uB294 \\uC601\\uD654\\uB4E4\\uC744 \\uD3C9\\uAC00\\uD574\\uC8FC\\uC138\\uC694.\"}),/*#__PURE__*/_jsx(\"div\",{className:\"subText\",children:\"\\uCC1C\\uD55C \\uC601\\uD654\\uB4E4\\uC744 \\uBC14\\uD0D5\\uC73C\\uB85C MOVIELY\\uAC00 \\uCDE8\\uD5A5\\uC800\\uACA9 \\uC601\\uD654\\uB4E4\\uC744 \\uCD94\\uCC9C\\uD574 \\uB4DC\\uB824\\uC694.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"stickyTop\",children:[/*#__PURE__*/_jsx(Link,{to:\"/recommendations\",children:/*#__PURE__*/_jsx(\"button\",{className:\"recommendButton\",children:\"\\uC601\\uD654 \\uCD94\\uCC9C \\uBC1B\\uAE30 >\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"genreButtons\",children:genres.map(genre=>/*#__PURE__*/_jsx(\"button\",{className:\"genreButton1\",onClick:()=>setSelectedGenre(genre),children:genre},genre))})]}),/*#__PURE__*/_jsx(\"div\",{className:\"bannerGrid\",children:loading?/*#__PURE__*/_jsx(\"div\",{className:\"loading\",children:\"\\uB85C\\uB529 \\uC911...\"}):banners.length>0?banners:/*#__PURE__*/_jsx(\"div\",{className:\"noMovies\",children:\"\\uC120\\uD0DD\\uD558\\uC2E0 \\uC7A5\\uB974\\uC758 \\uC601\\uD654\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"})})]});}export default MvchoPage;","map":{"version":3,"names":["React","useState","useEffect","Link","MvBanner","logoImage","jsx","_jsx","jsxs","_jsxs","MvchoPage","genreMapping","genres","Object","keys","selectedGenre","setSelectedGenre","movies","setMovies","loading","setLoading","API_URL","fetch","then","response","json","data","console","log","processedData","map","movie","flatrate","split","catch","error","filteredMovies","filter","genre","includes","banners","index","title","poster","poster_path","rating","Math","round","vote_average","className","children","src","alt","to","onClick","length"],"sources":["/Users/autumn/Desktop/moviely/moviely/src/pages/MvchoPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport MvBanner from './MvBanner';\nimport '../css/MvchoPage.css';\nimport logoImage from '../logo.png';\n\nfunction MvchoPage() {\n  // 한글 장르와 영어 장르를 매핑\n  const genreMapping = {\n    '장르 전체': 'All',\n    '액션': 'Action',\n    '모험': 'Adventure',\n    '애니메이션': 'Animation',\n    '코미디': 'Comedy',\n    '범죄': 'Crime',\n    '다큐멘터리': 'Documentary',\n    '드라마': 'Drama',\n    '가족': 'Family',\n    '판타지': 'Fantasy',\n    '역사': 'History',\n    '공포': 'Horror',\n    '음악': 'Music',\n    '미스터리': 'Mystery',\n    '로맨스': 'Romance',\n    'SF': 'Sci-Fi',\n    'TV 영화': 'TV Movie',\n    '스릴러': 'Thriller',\n    '전쟁': 'War',\n    '서부': 'Western'\n  };\n  const genres = Object.keys(genreMapping);\n  const [selectedGenre, setSelectedGenre] = useState('장르 전체');\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const API_URL = 'http://54.180.50.153:8080/api/movies';\n    \n    fetch(API_URL)\n      .then(response => response.json())\n      .then(data => {\n        console.log('API 응답 데이터:', data); // API 응답 데이터 확인\n        const processedData = data.map(movie => ({\n          ...movie,\n          flatrate: movie.flatrate.split(', ') // 쉼표로 구분된 문자열을 배열로 변환\n        }));\n        setMovies(processedData);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n        setLoading(false);\n      });\n  }, []);\n\n  const filteredMovies = selectedGenre === '장르 전체' ? movies : movies.filter(movie =>\n    movie.genre.split(', ').includes(genreMapping[selectedGenre])\n  );\n  console.log('필터링된 영화 데이터:', filteredMovies);\n\n  const banners = filteredMovies.map((movie, index) => (\n    <MvBanner\n      key={index}\n      title={movie.title}\n      poster={movie.poster_path}\n      flatrate={movie.flatrate}\n      rating={Math.round(movie.vote_average / 2)}\n    />\n  ));\n  console.log('생성된 배너들:', banners);\n\n  return (\n    <div className=\"MvchoPage\">\n      <img src={logoImage} alt=\"Logo\" className=\"logo\"/>\n      <div className=\"mainText\">재미있게 봤거나 눈길이 가는 영화들을 평가해주세요.</div>\n      <div className=\"subText\">찜한 영화들을 바탕으로 MOVIELY가 취향저격 영화들을 추천해 드려요.</div>\n      <div className=\"stickyTop\">\n        <Link to=\"/recommendations\">\n          <button className=\"recommendButton\">영화 추천 받기 &gt;</button>\n        </Link>\n        <div className=\"genreButtons\">\n          {genres.map((genre) => (\n            <button key={genre} className=\"genreButton1\" onClick={() => setSelectedGenre(genre)}>{genre}</button>\n          ))}\n        </div>\n      </div>\n      <div className=\"bannerGrid\">\n        {loading ? <div className=\"loading\">로딩 중...</div> : (banners.length > 0 ? banners : <div className=\"noMovies\">선택하신 장르의 영화가 없습니다.</div>)}\n      </div>\n    </div>\n  );\n}\n\nexport default MvchoPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}