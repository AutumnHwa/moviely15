{"ast":null,"code":"var _jsxFileName = \"/Users/autumn/Desktop/moviely/moviely/src/pages/LogSignPage.js\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { GoogleLogin } from 'react-google-login';\nimport '../css/LogSignPage.css';\nimport logoImage from '../logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = '13094654813-nqglekemv1iff66rsq4luqftbfgv51hi.apps.googleusercontent.com'; // 실제 Google 클라이언트 ID\n\nfunction LogSignPage() {\n  _s();\n  const navigate = useNavigate();\n  const handleGoogleSuccess = response => {\n    const {\n      code\n    } = response;\n\n    // 백엔드로 code를 보내서 추가 처리 (토큰 교환 등) 후 리디렉션\n    fetch(`https://moviely.duckdns.org/api/login?code=${code}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).then(data => {\n      if (data.isNewUser) {\n        navigate('/add');\n      } else {\n        navigate('/movie-select');\n      }\n    }).catch(error => {\n      console.error('Backend redirection failed:', error);\n      alert('백엔드 처리에 실패했습니다.');\n    });\n  };\n  const handleGoogleFailure = error => {\n    console.error('Google Login Failed:', error);\n    alert('Google 로그인에 실패했습니다.');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"logSignPage\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"logSign-logo\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logoImage,\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logSignBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uB85C\\uADF8\\uC778 \\uBC0F \\uD68C\\uC6D0\\uAC00\\uC785\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uC18C\\uC15C \\uB85C\\uADF8\\uC778 \\uBC0F \\uD68C\\uC6D0\\uAC00\\uC785\\uC73C\\uB85C\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 27\n        }, this), \"MOVIELY\\uC758 \\uBAA8\\uB4E0 \\uC11C\\uBE44\\uC2A4\\uB97C \\uC774\\uC6A9\\uD558\\uC2E4 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GoogleLogin, {\n        clientId: CLIENT_ID,\n        buttonText: \"Google\\uB85C \\uC2DC\\uC791\\uD558\\uAE30\",\n        onSuccess: handleGoogleSuccess,\n        onFailure: handleGoogleFailure,\n        cookiePolicy: 'single_host_origin',\n        responseType: \"code\",\n        redirectUri: \"https://moviely.duckdns.org/api/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n}\n_s(LogSignPage, \"CzcTeTziyjMsSrAVmHuCCb6+Bfg=\", false, function () {\n  return [useNavigate];\n});\n_c = LogSignPage;\nexport default LogSignPage;\nvar _c;\n$RefreshReg$(_c, \"LogSignPage\");","map":{"version":3,"names":["React","useNavigate","Link","GoogleLogin","logoImage","jsxDEV","_jsxDEV","CLIENT_ID","LogSignPage","_s","navigate","handleGoogleSuccess","response","code","fetch","method","headers","then","json","data","isNewUser","catch","error","console","alert","handleGoogleFailure","className","children","to","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","clientId","buttonText","onSuccess","onFailure","cookiePolicy","responseType","redirectUri","_c","$RefreshReg$"],"sources":["/Users/autumn/Desktop/moviely/moviely/src/pages/LogSignPage.js"],"sourcesContent":["import React from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { GoogleLogin } from 'react-google-login';\nimport '../css/LogSignPage.css';\nimport logoImage from '../logo.png';\n\nconst CLIENT_ID = '13094654813-nqglekemv1iff66rsq4luqftbfgv51hi.apps.googleusercontent.com'; // 실제 Google 클라이언트 ID\n\nfunction LogSignPage() {\n  const navigate = useNavigate();\n\n  const handleGoogleSuccess = (response) => {\n    const { code } = response;\n\n    // 백엔드로 code를 보내서 추가 처리 (토큰 교환 등) 후 리디렉션\n    fetch(`https://moviely.duckdns.org/api/login?code=${code}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    })\n      .then((response) => response.json())\n      .then((data) => {\n        if (data.isNewUser) {\n          navigate('/add');\n        } else {\n          navigate('/movie-select');\n        }\n      })\n      .catch((error) => {\n        console.error('Backend redirection failed:', error);\n        alert('백엔드 처리에 실패했습니다.');\n      });\n  };\n\n  const handleGoogleFailure = (error) => {\n    console.error('Google Login Failed:', error);\n    alert('Google 로그인에 실패했습니다.');\n  };\n\n  return (\n    <div className=\"logSignPage\">\n      <Link to=\"/\" className=\"logSign-logo\">\n        <img src={logoImage} alt=\"Logo\" />\n      </Link>\n      <div className=\"logSignBox\">\n        <h2>로그인 및 회원가입</h2>\n        <p>소셜 로그인 및 회원가입으로<br />MOVIELY의 모든 서비스를 이용하실 수 있습니다.</p>\n        <GoogleLogin\n          clientId={CLIENT_ID}\n          buttonText=\"Google로 시작하기\"\n          onSuccess={handleGoogleSuccess}\n          onFailure={handleGoogleFailure}\n          cookiePolicy={'single_host_origin'}\n          responseType=\"code\"\n          redirectUri=\"https://moviely.duckdns.org/api/login\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default LogSignPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}