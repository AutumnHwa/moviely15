{"ast":null,"code":"var _jsxFileName = \"/Users/autumn/Desktop/moviely/moviely/src/pages/LogSignPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { gapi } from 'gapi-script';\nimport '../css/LogSignPage.css';\nimport logoImage from '../logo.png';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = '13094654813-nqglekemv1iff66rsq4luqftbfgv51hi.apps.googleusercontent.com';\nfunction LogSignPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    login\n  } = useAuth();\n  const [gapiLoaded, setGapiLoaded] = useState(false);\n  useEffect(() => {\n    const initClient = () => {\n      gapi.client.init({\n        clientId: CLIENT_ID,\n        scope: ''\n      }).then(() => {\n        setGapiLoaded(true);\n      }).catch(error => {\n        console.error('Error initializing gapi client', error);\n      });\n    };\n    const loadGapi = () => {\n      if (window.gapi) {\n        gapi.load('client:auth2', initClient);\n      } else {\n        console.error('gapi is not defined');\n      }\n    };\n    window.addEventListener('load', loadGapi);\n    return () => {\n      window.removeEventListener('load', loadGapi);\n    };\n  }, []);\n  const handleGoogleLogin = () => {\n    if (!gapiLoaded) {\n      alert('Google API is not loaded yet. Please try again.');\n      return;\n    }\n    const auth2 = gapi.auth2.getAuthInstance();\n    if (!auth2) {\n      alert('Failed to initialize Google Auth instance.');\n      console.error('gapi.auth2.getAuthInstance() returned null');\n      return;\n    }\n    auth2.signIn().then(async googleUser => {\n      const idToken = googleUser.getAuthResponse().id_token;\n      try {\n        const res = await fetch('https://moviely.duckdns.org/api/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            token: idToken\n          }) // 토큰을 요청 본문에 포함\n        });\n        const data = await res.json();\n        if (data.token) {\n          login(data.token, data.user);\n          if (data.isNewUser) {\n            navigate('/add');\n          } else {\n            navigate('/movie-select');\n          }\n        } else {\n          alert('로그인에 실패했습니다.');\n        }\n      } catch (error) {\n        console.error('Backend redirection failed:', error);\n        alert('백엔드 처리에 실패했습니다.');\n      }\n    }).catch(error => {\n      console.error('Google Login Failed:', error);\n      alert('Google 로그인에 실패했습니다.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"logSignPage\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"logSign-logo\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logoImage,\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logSignBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uB85C\\uADF8\\uC778 \\uBC0F \\uD68C\\uC6D0\\uAC00\\uC785\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uC18C\\uC15C \\uB85C\\uADF8\\uC778 \\uBC0F \\uD68C\\uC6D0\\uAC00\\uC785\\uC73C\\uB85C\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 27\n        }, this), \"MOVIELY\\uC758 \\uBAA8\\uB4E0 \\uC11C\\uBE44\\uC2A4\\uB97C \\uC774\\uC6A9\\uD558\\uC2E4 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"googleLoginButton\",\n        onClick: handleGoogleLogin,\n        children: \"Google\\uB85C \\uC2DC\\uC791\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(LogSignPage, \"o2ZQy4zbjcV/l2KnFW5Uj73+2U0=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = LogSignPage;\nexport default LogSignPage;\nvar _c;\n$RefreshReg$(_c, \"LogSignPage\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","Link","gapi","logoImage","useAuth","jsxDEV","_jsxDEV","CLIENT_ID","LogSignPage","_s","navigate","login","gapiLoaded","setGapiLoaded","initClient","client","init","clientId","scope","then","catch","error","console","loadGapi","window","load","addEventListener","removeEventListener","handleGoogleLogin","alert","auth2","getAuthInstance","signIn","googleUser","idToken","getAuthResponse","id_token","res","fetch","method","headers","body","JSON","stringify","token","data","json","user","isNewUser","className","children","to","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/autumn/Desktop/moviely/moviely/src/pages/LogSignPage.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport { gapi } from 'gapi-script';\nimport '../css/LogSignPage.css';\nimport logoImage from '../logo.png';\nimport { useAuth } from '../context/AuthContext';\n\nconst CLIENT_ID = '13094654813-nqglekemv1iff66rsq4luqftbfgv51hi.apps.googleusercontent.com';\n\nfunction LogSignPage() {\n  const navigate = useNavigate();\n  const { login } = useAuth();\n  const [gapiLoaded, setGapiLoaded] = useState(false);\n\n  useEffect(() => {\n    const initClient = () => {\n      gapi.client.init({\n        clientId: CLIENT_ID,\n        scope: '',\n      }).then(() => {\n        setGapiLoaded(true);\n      }).catch((error) => {\n        console.error('Error initializing gapi client', error);\n      });\n    };\n\n    const loadGapi = () => {\n      if (window.gapi) {\n        gapi.load('client:auth2', initClient);\n      } else {\n        console.error('gapi is not defined');\n      }\n    };\n\n    window.addEventListener('load', loadGapi);\n\n    return () => {\n      window.removeEventListener('load', loadGapi);\n    };\n  }, []);\n\n  const handleGoogleLogin = () => {\n    if (!gapiLoaded) {\n      alert('Google API is not loaded yet. Please try again.');\n      return;\n    }\n\n    const auth2 = gapi.auth2.getAuthInstance();\n    if (!auth2) {\n      alert('Failed to initialize Google Auth instance.');\n      console.error('gapi.auth2.getAuthInstance() returned null');\n      return;\n    }\n\n    auth2.signIn().then(async (googleUser) => {\n      const idToken = googleUser.getAuthResponse().id_token;\n\n      try {\n        const res = await fetch('https://moviely.duckdns.org/api/login', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({ token: idToken }), // 토큰을 요청 본문에 포함\n        });\n        const data = await res.json();\n\n        if (data.token) {\n          login(data.token, data.user);\n          if (data.isNewUser) {\n            navigate('/add');\n          } else {\n            navigate('/movie-select');\n          }\n        } else {\n          alert('로그인에 실패했습니다.');\n        }\n      } catch (error) {\n        console.error('Backend redirection failed:', error);\n        alert('백엔드 처리에 실패했습니다.');\n      }\n    }).catch((error) => {\n      console.error('Google Login Failed:', error);\n      alert('Google 로그인에 실패했습니다.');\n    });\n  };\n\n  return (\n    <div className=\"logSignPage\">\n      <Link to=\"/\" className=\"logSign-logo\">\n        <img src={logoImage} alt=\"Logo\" />\n      </Link>\n      <div className=\"logSignBox\">\n        <h2>로그인 및 회원가입</h2>\n        <p>소셜 로그인 및 회원가입으로<br />MOVIELY의 모든 서비스를 이용하실 수 있습니다.</p>\n        <button className=\"googleLoginButton\" onClick={handleGoogleLogin}>\n          Google로 시작하기\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default LogSignPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}