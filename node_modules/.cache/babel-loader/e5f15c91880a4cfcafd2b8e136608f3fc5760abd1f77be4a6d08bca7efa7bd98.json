{"ast":null,"code":"var _jsxFileName = \"/Users/autumn/Desktop/moviely/moviely/src/pages/LogSignPage.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport '../css/LogSignPage.css';\nimport logoImage from '../logo.png';\nimport { useAuth } from '../context/AuthContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CLIENT_ID = '13094654813-nqglekemv1iff66rsq4luqftbfgv51hi.apps.googleusercontent.com'; // 실제 Google 클라이언트 ID로 대체\nconst REDIRECT_URI = 'https://moviely.duckdns.org/login/oauth2/code/google';\nfunction LogSignPage() {\n  _s();\n  const navigate = useNavigate();\n  const {\n    login\n  } = useAuth();\n  useEffect(() => {\n    const {\n      gapi\n    } = window;\n    gapi.load('auth2', function () {\n      gapi.auth2.init({\n        client_id: CLIENT_ID,\n        redirect_uri: REDIRECT_URI\n      });\n    });\n  }, []);\n  const handleGoogleLogin = async () => {\n    const {\n      gapi\n    } = window;\n    const auth2 = gapi.auth2.getAuthInstance();\n    auth2.grantOfflineAccess().then(async response => {\n      const {\n        code\n      } = response;\n      try {\n        const res = await fetch(`https://moviely.duckdns.org/api/login?code=${code}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        const data = await res.json();\n        if (data.token) {\n          login(data.token, data.user); // 로그인 시 사용자 정보 저장\n          if (data.isNewUser) {\n            navigate('/add');\n          } else {\n            navigate('/movie-select');\n          }\n        } else {\n          alert('로그인에 실패했습니다.');\n        }\n      } catch (error) {\n        console.error('Backend redirection failed:', error);\n        alert('백엔드 처리에 실패했습니다.');\n      }\n    }).catch(error => {\n      console.error('Google Login Failed:', error);\n      alert('Google 로그인에 실패했습니다.');\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"logSignPage\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"logSign-logo\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: logoImage,\n        alt: \"Logo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"logSignBox\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"\\uB85C\\uADF8\\uC778 \\uBC0F \\uD68C\\uC6D0\\uAC00\\uC785\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\uC18C\\uC15C \\uB85C\\uADF8\\uC778 \\uBC0F \\uD68C\\uC6D0\\uAC00\\uC785\\uC73C\\uB85C\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 27\n        }, this), \"MOVIELY\\uC758 \\uBAA8\\uB4E0 \\uC11C\\uBE44\\uC2A4\\uB97C \\uC774\\uC6A9\\uD558\\uC2E4 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"googleLoginButton\",\n        onClick: handleGoogleLogin,\n        children: \"Google\\uB85C \\uC2DC\\uC791\\uD558\\uAE30\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(LogSignPage, \"aAUMmgKuIKQ7IvcuCOlm0ucjkuQ=\", false, function () {\n  return [useNavigate, useAuth];\n});\n_c = LogSignPage;\nexport default LogSignPage;\nvar _c;\n$RefreshReg$(_c, \"LogSignPage\");","map":{"version":3,"names":["React","useEffect","useNavigate","Link","logoImage","useAuth","jsxDEV","_jsxDEV","CLIENT_ID","REDIRECT_URI","LogSignPage","_s","navigate","login","gapi","window","load","auth2","init","client_id","redirect_uri","handleGoogleLogin","getAuthInstance","grantOfflineAccess","then","response","code","res","fetch","method","headers","data","json","token","user","isNewUser","alert","error","console","catch","className","children","to","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/autumn/Desktop/moviely/moviely/src/pages/LogSignPage.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useNavigate, Link } from 'react-router-dom';\nimport '../css/LogSignPage.css';\nimport logoImage from '../logo.png';\nimport { useAuth } from '../context/AuthContext';\n\nconst CLIENT_ID = '13094654813-nqglekemv1iff66rsq4luqftbfgv51hi.apps.googleusercontent.com'; // 실제 Google 클라이언트 ID로 대체\nconst REDIRECT_URI = 'https://moviely.duckdns.org/login/oauth2/code/google';\n\nfunction LogSignPage() {\n  const navigate = useNavigate();\n  const { login } = useAuth();\n\n  useEffect(() => {\n    const { gapi } = window;\n    gapi.load('auth2', function () {\n      gapi.auth2.init({\n        client_id: CLIENT_ID,\n        redirect_uri: REDIRECT_URI,\n      });\n    });\n  }, []);\n\n  const handleGoogleLogin = async () => {\n    const { gapi } = window;\n    const auth2 = gapi.auth2.getAuthInstance();\n    \n    auth2.grantOfflineAccess().then(async (response) => {\n      const { code } = response;\n\n      try {\n        const res = await fetch(`https://moviely.duckdns.org/api/login?code=${code}`, {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        });\n        const data = await res.json();\n\n        if (data.token) {\n          login(data.token, data.user); // 로그인 시 사용자 정보 저장\n          if (data.isNewUser) {\n            navigate('/add');\n          } else {\n            navigate('/movie-select');\n          }\n        } else {\n          alert('로그인에 실패했습니다.');\n        }\n      } catch (error) {\n        console.error('Backend redirection failed:', error);\n        alert('백엔드 처리에 실패했습니다.');\n      }\n    }).catch((error) => {\n      console.error('Google Login Failed:', error);\n      alert('Google 로그인에 실패했습니다.');\n    });\n  };\n\n  return (\n    <div className=\"logSignPage\">\n      <Link to=\"/\" className=\"logSign-logo\">\n        <img src={logoImage} alt=\"Logo\" />\n      </Link>\n      <div className=\"logSignBox\">\n        <h2>로그인 및 회원가입</h2>\n        <p>소셜 로그인 및 회원가입으로<br />MOVIELY의 모든 서비스를 이용하실 수 있습니다.</p>\n        <button className=\"googleLoginButton\" onClick={handleGoogleLogin}>\n          Google로 시작하기\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default LogSignPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}