{"ast":null,"code":"var _jsxFileName = \"/Users/autumn/Desktop/moviely/moviely/src/pages/LandingPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { mockMovies } from './Mockmv'; // 여기에 영화 데이터의 위치를 정확하게 지정해주세요.\nimport '../css/LandingPage.css';\nimport logoImage from '../logo.png';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction LandingPage() {\n  _s();\n  // 영화 포스터 상태를 세 개 만듭니다.\n  const [posters, setPosters] = useState([]);\n  useEffect(() => {\n    // 컴포넌트가 마운트될 때 랜덤 포스터를 선택합니다.\n    setPosters([mockMovies[Math.floor(Math.random() * mockMovies.length)].poster_path, mockMovies[Math.floor(Math.random() * mockMovies.length)].poster_path, mockMovies[Math.floor(Math.random() * mockMovies.length)].poster_path]);\n  }, []); // 빈 의존성 배열을 넣어서 컴포넌트가 마운트될 때만 실행되도록 합니다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logoImage,\n      alt: \"Logo\",\n      className: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"heading\",\n      children: [\"\\uC624\\uB298 \\uBB58 \\uBCFC\\uC9C0 \\uBAA8\\uB974\\uACA0\\uB2E4\\uACE0\\uC694?\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 46\n      }, this), \"\\uB0B4 \\uCDE8\\uD5A5\\uC5D0 \\uAF2D \\uB9DE\\uB294 OTT \\uCEE8\\uD150\\uCE20\\uB97C \\uCC3E\\uC544\\uBCF4\\uC138\\uC694!\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"buttonContainer\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/login\",\n        className: \"button\",\n        children: \"\\uB85C\\uADF8\\uC778\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Link, {\n        to: \"/signin\",\n        className: \"button\",\n        children: \"\\uD68C\\uC6D0\\uAC00\\uC785\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"image-container\",\n      children: posters.map((poster, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"image\",\n        style: {\n          backgroundImage: `url(${poster})`\n        }\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n}\n_s(LandingPage, \"Er56YLlm7GPD/izKoslQJnuMv6U=\");\n_c = LandingPage;\nexport default LandingPage;\nvar _c;\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","mockMovies","logoImage","jsxDEV","_jsxDEV","LandingPage","_s","posters","setPosters","Math","floor","random","length","poster_path","className","children","src","alt","fileName","_jsxFileName","lineNumber","columnNumber","to","map","poster","index","style","backgroundImage","_c","$RefreshReg$"],"sources":["/Users/autumn/Desktop/moviely/moviely/src/pages/LandingPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { mockMovies } from './Mockmv'; // 여기에 영화 데이터의 위치를 정확하게 지정해주세요.\nimport '../css/LandingPage.css'; \nimport logoImage from '../logo.png';\n\nfunction LandingPage() {\n  // 영화 포스터 상태를 세 개 만듭니다.\n  const [posters, setPosters] = useState([]);\n\n  useEffect(() => {\n    // 컴포넌트가 마운트될 때 랜덤 포스터를 선택합니다.\n    setPosters([\n      mockMovies[Math.floor(Math.random() * mockMovies.length)].poster_path,\n      mockMovies[Math.floor(Math.random() * mockMovies.length)].poster_path,\n      mockMovies[Math.floor(Math.random() * mockMovies.length)].poster_path\n    ]);\n  }, []); // 빈 의존성 배열을 넣어서 컴포넌트가 마운트될 때만 실행되도록 합니다.\n\n  return (\n    <div className=\"container\">\n      <img src={logoImage} alt=\"Logo\" className=\"logo\"/>\n      <h1 className=\"heading\">오늘 뭘 볼지 모르겠다고요?<br />내 취향에 꼭 맞는 OTT 컨텐츠를 찾아보세요!</h1>\n      <div className=\"buttonContainer\">\n        <Link to=\"/login\" className=\"button\">로그인</Link>\n        <Link to=\"/signin\" className=\"button\">회원가입</Link>\n      </div>\n      <div className=\"image-container\">\n        {posters.map((poster, index) => (\n          <div key={index} className=\"image\" style={{ backgroundImage: `url(${poster})` }}></div>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default LandingPage;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,kBAAkB;AACvC,SAASC,UAAU,QAAQ,UAAU,CAAC,CAAC;AACvC,OAAO,wBAAwB;AAC/B,OAAOC,SAAS,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,SAASC,WAAWA,CAAA,EAAG;EAAAC,EAAA;EACrB;EACA,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EAE1CC,SAAS,CAAC,MAAM;IACd;IACAS,UAAU,CAAC,CACTP,UAAU,CAACQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGV,UAAU,CAACW,MAAM,CAAC,CAAC,CAACC,WAAW,EACrEZ,UAAU,CAACQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGV,UAAU,CAACW,MAAM,CAAC,CAAC,CAACC,WAAW,EACrEZ,UAAU,CAACQ,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGV,UAAU,CAACW,MAAM,CAAC,CAAC,CAACC,WAAW,CACtE,CAAC;EACJ,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;;EAER,oBACET,OAAA;IAAKU,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBX,OAAA;MAAKY,GAAG,EAAEd,SAAU;MAACe,GAAG,EAAC,MAAM;MAACH,SAAS,EAAC;IAAM;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAC,CAAC,eAClDjB,OAAA;MAAIU,SAAS,EAAC,SAAS;MAAAC,QAAA,GAAC,wEAAe,eAAAX,OAAA;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,8GAA0B;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC5EjB,OAAA;MAAKU,SAAS,EAAC,iBAAiB;MAAAC,QAAA,gBAC9BX,OAAA,CAACJ,IAAI;QAACsB,EAAE,EAAC,QAAQ;QAACR,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAC;MAAG;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC/CjB,OAAA,CAACJ,IAAI;QAACsB,EAAE,EAAC,SAAS;QAACR,SAAS,EAAC,QAAQ;QAAAC,QAAA,EAAC;MAAI;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,eACNjB,OAAA;MAAKU,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC7BR,OAAO,CAACgB,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACzBrB,OAAA;QAAiBU,SAAS,EAAC,OAAO;QAACY,KAAK,EAAE;UAAEC,eAAe,EAAG,OAAMH,MAAO;QAAG;MAAE,GAAtEC,KAAK;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAuE,CACvF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACf,EAAA,CA5BQD,WAAW;AAAAuB,EAAA,GAAXvB,WAAW;AA8BpB,eAAeA,WAAW;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}