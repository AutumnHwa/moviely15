{"ast":null,"code":"var _jsxFileName = \"/Users/autumn/Desktop/moviely/moviely/src/pages/MvchoPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport MvBanner from './MvBanner';\nimport '../css/MvchoPage.css';\nimport logoImage from '../logo.png';\n\n// fetch 요청에 타임아웃 설정 함수\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction fetchWithTimeout(url, options, timeout = 7000) {\n  return new Promise((resolve, reject) => {\n    const timer = setTimeout(() => {\n      reject(new Error('Request timed out'));\n    }, timeout);\n    fetch(url, options).then(response => {\n      clearTimeout(timer);\n      resolve(response);\n    }).catch(err => {\n      clearTimeout(timer);\n      reject(err);\n    });\n  });\n}\nfunction MvchoPage() {\n  _s();\n  // 한글 장르와 영어 장르를 매핑\n  const genreMapping = {\n    '장르 전체': 'All',\n    '액션': 'Action',\n    '모험': 'Adventure',\n    '애니메이션': 'Animation',\n    '코미디': 'Comedy',\n    '범죄': 'Crime',\n    '다큐멘터리': 'Documentary',\n    '드라마': 'Drama',\n    '가족': 'Family',\n    '판타지': 'Fantasy',\n    '역사': 'History',\n    '공포': 'Horror',\n    '음악': 'Music',\n    '미스터리': 'Mystery',\n    '로맨스': 'Romance',\n    'SF': 'Sci-Fi',\n    'TV 영화': 'TV Movie',\n    '스릴러': 'Thriller',\n    '전쟁': 'War',\n    '서부': 'Western'\n  };\n  const genres = Object.keys(genreMapping);\n  const [selectedGenre, setSelectedGenre] = useState('장르 전체');\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    const API_URL = 'https://jwlebfmh54.execute-api.ap-northeast-2.amazonaws.com/movieAPI/api/movies';\n    fetchWithTimeout(API_URL, {}, 10000).then(response => {\n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      return response.json();\n    }).then(data => {\n      console.log('API 응답 데이터:', data); // API 응답 데이터 확인\n      if (!Array.isArray(data)) {\n        throw new Error('Expected an array of movies');\n      }\n      const processedData = data.map(movie => ({\n        ...movie,\n        flatrate: movie.flatrate.split(', ') // 쉼표로 구분된 문자열을 배열로 변환\n      }));\n      setMovies(processedData);\n      setLoading(false);\n    }).catch(error => {\n      console.error('Error fetching data:', error);\n      setLoading(false);\n    });\n  }, []);\n  const filteredMovies = selectedGenre === '장르 전체' ? movies : movies.filter(movie => movie.genre.split(', ').includes(genreMapping[selectedGenre]));\n  console.log('필터링된 영화 데이터:', filteredMovies);\n  const banners = filteredMovies.map((movie, index) => /*#__PURE__*/_jsxDEV(MvBanner, {\n    title: movie.title,\n    poster: movie.poster_path,\n    flatrate: movie.flatrate,\n    rating: Math.round(movie.vote_average / 2)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this));\n  console.log('생성된 배너들:', banners);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"MvchoPage\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: logoImage,\n      alt: \"Logo\",\n      className: \"logo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mainText\",\n      children: \"\\uC7AC\\uBBF8\\uC788\\uAC8C \\uBD24\\uAC70\\uB098 \\uB208\\uAE38\\uC774 \\uAC00\\uB294 \\uC601\\uD654\\uB4E4\\uC744 \\uD3C9\\uAC00\\uD574\\uC8FC\\uC138\\uC694.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"subText\",\n      children: \"\\uCC1C\\uD55C \\uC601\\uD654\\uB4E4\\uC744 \\uBC14\\uD0D5\\uC73C\\uB85C MOVIELY\\uAC00 \\uCDE8\\uD5A5\\uC800\\uACA9 \\uC601\\uD654\\uB4E4\\uC744 \\uCD94\\uCC9C\\uD574 \\uB4DC\\uB824\\uC694.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"stickyTop\",\n      children: [/*#__PURE__*/_jsxDEV(Link, {\n        to: \"/recommendations\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"recommendButton\",\n          children: \"\\uC601\\uD654 \\uCD94\\uCC9C \\uBC1B\\uAE30 >\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"genreButtons\",\n        children: genres.map(genre => /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"genreButton1\",\n          onClick: () => setSelectedGenre(genre),\n          children: genre\n        }, genre, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bannerGrid\",\n      children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"loading\",\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 20\n      }, this) : banners.length > 0 ? banners : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"noMovies\",\n        children: \"\\uC120\\uD0DD\\uD558\\uC2E0 \\uC7A5\\uB974\\uC758 \\uC601\\uD654\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 93\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n}\n_s(MvchoPage, \"eWpfxiVnlQCdsRiVs8ifIqhg0ew=\");\n_c = MvchoPage;\nexport default MvchoPage;\nvar _c;\n$RefreshReg$(_c, \"MvchoPage\");","map":{"version":3,"names":["React","useState","useEffect","Link","MvBanner","logoImage","jsxDEV","_jsxDEV","fetchWithTimeout","url","options","timeout","Promise","resolve","reject","timer","setTimeout","Error","fetch","then","response","clearTimeout","catch","err","MvchoPage","_s","genreMapping","genres","Object","keys","selectedGenre","setSelectedGenre","movies","setMovies","loading","setLoading","API_URL","ok","status","json","data","console","log","Array","isArray","processedData","map","movie","flatrate","split","error","filteredMovies","filter","genre","includes","banners","index","title","poster","poster_path","rating","Math","round","vote_average","fileName","_jsxFileName","lineNumber","columnNumber","className","children","src","alt","to","onClick","length","_c","$RefreshReg$"],"sources":["/Users/autumn/Desktop/moviely/moviely/src/pages/MvchoPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport MvBanner from './MvBanner';\nimport '../css/MvchoPage.css';\nimport logoImage from '../logo.png';\n\n// fetch 요청에 타임아웃 설정 함수\nfunction fetchWithTimeout(url, options, timeout = 7000) {\n  return new Promise((resolve, reject) => {\n    const timer = setTimeout(() => {\n      reject(new Error('Request timed out'));\n    }, timeout);\n\n    fetch(url, options)\n      .then(response => {\n        clearTimeout(timer);\n        resolve(response);\n      })\n      .catch(err => {\n        clearTimeout(timer);\n        reject(err);\n      });\n  });\n}\n\nfunction MvchoPage() {\n  // 한글 장르와 영어 장르를 매핑\n  const genreMapping = {\n    '장르 전체': 'All',\n    '액션': 'Action',\n    '모험': 'Adventure',\n    '애니메이션': 'Animation',\n    '코미디': 'Comedy',\n    '범죄': 'Crime',\n    '다큐멘터리': 'Documentary',\n    '드라마': 'Drama',\n    '가족': 'Family',\n    '판타지': 'Fantasy',\n    '역사': 'History',\n    '공포': 'Horror',\n    '음악': 'Music',\n    '미스터리': 'Mystery',\n    '로맨스': 'Romance',\n    'SF': 'Sci-Fi',\n    'TV 영화': 'TV Movie',\n    '스릴러': 'Thriller',\n    '전쟁': 'War',\n    '서부': 'Western'\n  };\n  const genres = Object.keys(genreMapping);\n  const [selectedGenre, setSelectedGenre] = useState('장르 전체');\n  const [movies, setMovies] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const API_URL = 'https://jwlebfmh54.execute-api.ap-northeast-2.amazonaws.com/movieAPI/api/movies';\n\n    fetchWithTimeout(API_URL, {}, 10000)\n      .then(response => {\n        if (!response.ok) {\n          throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return response.json();\n      })\n      .then(data => {\n        console.log('API 응답 데이터:', data); // API 응답 데이터 확인\n        if (!Array.isArray(data)) {\n          throw new Error('Expected an array of movies');\n        }\n        const processedData = data.map(movie => ({\n          ...movie,\n          flatrate: movie.flatrate.split(', ') // 쉼표로 구분된 문자열을 배열로 변환\n        }));\n        setMovies(processedData);\n        setLoading(false);\n      })\n      .catch(error => {\n        console.error('Error fetching data:', error);\n        setLoading(false);\n      });\n  }, []);\n\n  const filteredMovies = selectedGenre === '장르 전체' ? movies : movies.filter(movie =>\n    movie.genre.split(', ').includes(genreMapping[selectedGenre])\n  );\n  console.log('필터링된 영화 데이터:', filteredMovies);\n\n  const banners = filteredMovies.map((movie, index) => (\n    <MvBanner\n      key={index}\n      title={movie.title}\n      poster={movie.poster_path}\n      flatrate={movie.flatrate}\n      rating={Math.round(movie.vote_average / 2)}\n    />\n  ));\n  console.log('생성된 배너들:', banners);\n\n  return (\n    <div className=\"MvchoPage\">\n      <img src={logoImage} alt=\"Logo\" className=\"logo\"/>\n      <div className=\"mainText\">재미있게 봤거나 눈길이 가는 영화들을 평가해주세요.</div>\n      <div className=\"subText\">찜한 영화들을 바탕으로 MOVIELY가 취향저격 영화들을 추천해 드려요.</div>\n      <div className=\"stickyTop\">\n        <Link to=\"/recommendations\">\n          <button className=\"recommendButton\">영화 추천 받기 &gt;</button>\n        </Link>\n        <div className=\"genreButtons\">\n          {genres.map((genre) => (\n            <button key={genre} className=\"genreButton1\" onClick={() => setSelectedGenre(genre)}>{genre}</button>\n          ))}\n        </div>\n      </div>\n      <div className=\"bannerGrid\">\n        {loading ? <div className=\"loading\">로딩 중...</div> : (banners.length > 0 ? banners : <div className=\"noMovies\">선택하신 장르의 영화가 없습니다.</div>)}\n      </div>\n    </div>\n  );\n}\n\nexport default MvchoPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}